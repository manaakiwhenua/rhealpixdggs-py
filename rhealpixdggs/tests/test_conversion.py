"""
This Python 3.11 code tests the ``conversion_utils`` module.
Beware, these tests cover only some functions and only some scenarios.
Keep adding tests!

- David Habgood (DH), 2020-10-27: Initial version.
"""

# Import standard modules.
import unittest
from shapely import wkt

# Import my modules.
from rhealpixdggs.conversion import *


test_geom = """
        MULTIPOLYGON (((148.6675 -35.5725, 148.6675 -35.575, 148.67 -35.575, 148.67 -35.5775, 148.6725 -35.5775,
        148.6725 -35.58, 148.675 -35.58, 148.675 -35.5825, 148.6775 -35.5825, 148.6775 -35.585, 148.685 -35.585,
        148.685 -35.5825, 148.7 -35.5825, 148.7 -35.585, 148.7025 -35.585, 148.7025 -35.5875, 148.705 -35.5875,
        148.705 -35.59, 148.7075 -35.59, 148.7075 -35.595, 148.7075 -35.6, 148.71 -35.6, 148.71 -35.605, 148.7125
        -35.605, 148.7125 -35.6075, 148.715 -35.6075, 148.715 -35.61, 148.7275 -35.61, 148.7375 -35.61, 148.7375
        -35.6025, 148.7425 -35.6025, 148.7425 -35.6, 148.745 -35.6, 148.745 -35.5975, 148.7525 -35.5975, 148.7525
        -35.595, 148.7575 -35.595, 148.7575 -35.5975, 148.7625 -35.5975, 148.7625 -35.6, 148.765 -35.6, 148.765
        -35.6025, 148.7675 -35.6025, 148.7675 -35.605, 148.77 -35.605, 148.77 -35.6075, 148.7725 -35.6075, 148.7725
        -35.61, 148.7775 -35.61, 148.7775 -35.615, 148.78 -35.615, 148.78 -35.6175, 148.78 -35.6225, 148.78 -35.625,
        148.7825 -35.625, 148.7825 -35.63, 148.78 -35.63, 148.78 -35.635, 148.7775 -35.635, 148.7775 -35.6375, 148.775
        -35.6375, 148.775 -35.64, 148.7725 -35.64, 148.7725 -35.6425, 148.77 -35.6425, 148.77 -35.6475, 148.77 -35.65,
        148.7725 -35.65, 148.7725 -35.655, 148.7875 -35.655, 148.7875 -35.6575, 148.79 -35.6575, 148.79 -35.66, 148.7925
        -35.66, 148.7925 -35.6625, 148.7975 -35.6625, 148.7975 -35.665, 148.7975 -35.67, 148.7975 -35.675, 148.795
        -35.675, 148.795 -35.68, 148.7975 -35.68, 148.7975 -35.685, 148.795 -35.685, 148.795 -35.6875, 148.7925
        -35.6875,148.7925 -35.69, 148.7925 -35.695, 148.79 -35.695, 148.79 -35.7025, 148.7925 -35.7025, 148.7925
        -35.7075, 148.795 -35.7075, 148.795 -35.71, 148.8 -35.71, 148.8 -35.7125, 148.8025 -35.7125, 148.8025 -35.715,
        148.8025 -35.7175, 148.8 -35.7175, 148.8 -35.72, 148.7975 -35.72, 148.7975 -35.7225, 148.795 -35.7225, 148.795
        -35.725, 148.79 -35.725, 148.79 -35.7275, 148.7825 -35.7275, 148.78 -35.7275, 148.78 -35.725, 148.7775 -35.725,
        148.7775 -35.7225, 148.775 -35.7225, 148.775 -35.7175, 148.7725 -35.7175, 148.7725 -35.7125, 148.77 -35.7125,
        148.77 -35.71, 148.7675 -35.71, 148.7675 -35.7075, 148.765 -35.7075, 148.765 -35.705, 148.7625 -35.705, 148.7625
        -35.7, 148.76 -35.7, 148.76 -35.6975, 148.7575 -35.6975, 148.7575 -35.695, 148.755 -35.695, 148.755 -35.69,
        148.7525 -35.69, 148.7525 -35.6875, 148.75 -35.6875, 148.75 -35.685, 148.745 -35.685, 148.745 -35.6875, 148.74
        -35.6875, 148.74 -35.685, 148.735 -35.685, 148.735 -35.6825, 148.73 -35.6825, 148.73 -35.68, 148.7275 -35.68,
        148.7275 -35.6725, 148.73 -35.6725, 148.73 -35.6675, 148.7275 -35.6675, 148.7275 -35.665, 148.7175 -35.665,
        148.715 -35.665, 148.715 -35.6675, 148.7125 -35.6675, 148.71 -35.6675, 148.71 -35.665, 148.7075 -35.665,
        148.7075 -35.6625, 148.7025 -35.6625, 148.7025 -35.66, 148.695 -35.66, 148.695 -35.665, 148.6925 -35.665,
        148.6925 -35.6625, 148.69 -35.6625, 148.69 -35.66, 148.6875 -35.66, 148.6875 -35.6575, 148.66 -35.6575,
        148.65 -35.6575, 148.65 -35.655, 148.6475 -35.655, 148.6475 -35.6525, 148.6425 -35.6525, 148.64 -35.6525,
        148.64 -35.65, 148.64 -35.6475, 148.635 -35.6475, 148.635 -35.645, 148.6325 -35.645, 148.6325 -35.6425, 148.63
        -35.6425, 148.63 -35.64, 148.6275 -35.64, 148.625 -35.64, 148.625 -35.6375, 148.6225 -35.6375, 148.6225 -35.635,
        148.62 -35.635, 148.62 -35.6325, 148.62 -35.63, 148.6175 -35.63, 148.6175 -35.625, 148.615 -35.625, 148.615
        -35.6225, 148.6125 -35.6225, 148.6125 -35.62, 148.615 -35.62, 148.615 -35.6175, 148.6175 -35.6175, 148.6175
        -35.6075, 148.6225 -35.6075, 148.6225 -35.61, 148.625 -35.61, 148.625 -35.6125, 148.6275 -35.6125, 148.6275
        -35.61, 148.63 -35.61, 148.63 -35.6075, 148.63 -35.605, 148.6325 -35.605, 148.6325 -35.6, 148.635 -35.6, 148.635
        -35.5975, 148.6375 -35.5975, 148.6375 -35.595, 148.64 -35.595, 148.64 -35.59, 148.64 -35.5875, 148.645 -35.5875,
        148.645 -35.585, 148.6475 -35.585, 148.65 -35.585, 148.65 -35.5825, 148.6525 -35.5825, 148.6525 -35.58, 148.655
        -35.58, 148.655 -35.575, 148.6575 -35.575, 148.6575 -35.5725, 148.665 -35.5725, 148.6675 -35.5725)))"""
test_poly = wkt.loads(test_geom)
# test geom from https://gds.loci.cat/geometry/geofabric2_1_1_contractedcatchment/12104622?_format=text/turtle&_view=geometryview
test_feature = ["Contracted_Catchment_12104622", test_poly]
ground_truth_cells_for_catchment_12104622_at_res_9 = [
    "R785180852",
    "R785180854",
    "R785180855",
    "R785180857",
    "R785180858",
    "R785180871",
    "R785180874",
    "R785180875",
    "R785180876",
    "R785180877",
    "R785180878",
    "R785180880",
    "R785180881",
    "R785180882",
    "R785180883",
    "R785180884",
    "R785180885",
    "R785180886",
    "R785180887",
    "R785180888",
    "R785181376",
    "R785181377",
    "R785181378",
    "R785181602",
    "R785181604",
    "R785181605",
    "R785181606",
    "R785181607",
    "R785181608",
    "R78518161",
    "R785181620",
    "R785181623",
    "R785181624",
    "R785181625",
    "R785181626",
    "R785181627",
    "R785181628",
    "R78518163",
    "R78518164",
    "R78518165",
    "R78518166",
    "R78518167",
    "R78518168",
    "R785181703",
    "R785181704",
    "R785181705",
    "R785181706",
    "R785181707",
    "R785181708",
    "R785181713",
    "R785181716",
    "R785181717",
    "R78518173",
    "R785181740",
    "R785181741",
    "R785181743",
    "R785181744",
    "R785181745",
    "R785181746",
    "R785181747",
    "R785181748",
    "R78518176",
    "R78518177",
    "R785181780",
    "R785181783",
    "R785181784",
    "R785181785",
    "R785181786",
    "R785181787",
    "R785181788",
    "R785181844",
    "R785181845",
    "R785181846",
    "R785181847",
    "R785181848",
    "R785181850",
    "R785181853",
    "R785181854",
    "R785181855",
    "R785181856",
    "R785181857",
    "R785181858",
    "R785181863",
    "R785181864",
    "R785181865",
    "R785181866",
    "R785181867",
    "R785181868",
    "R78518187",
    "R78518188",
    "R785182660",
    "R785182661",
    "R785182663",
    "R785182664",
    "R785182665",
    "R785182666",
    "R785182667",
    "R785182668",
    "R785183210",
    "R785183211",
    "R785183212",
    "R785183214",
    "R785183215",
    "R785183217",
    "R785183218",
    "R78518322",
    "R785183242",
    "R785183250",
    "R785183251",
    "R785183252",
    "R785183254",
    "R785183255",
    "R78518400",
    "R78518401",
    "R78518402",
    "R78518403",
    "R78518404",
    "R78518405",
    "R785184061",
    "R785184062",
    "R785184065",
    "R785184070",
    "R785184071",
    "R785184072",
    "R785184073",
    "R785184074",
    "R785184075",
    "R785184080",
    "R785184081",
    "R785184082",
    "R785184083",
    "R785184084",
    "R785184085",
    "R78518410",
    "R78518411",
    "R78518412",
    "R78518413",
    "R78518414",
    "R78518415",
    "R785184160",
    "R785184161",
    "R785184162",
    "R785184163",
    "R785184164",
    "R785184165",
    "R785184168",
    "R785184170",
    "R785184171",
    "R785184172",
    "R785184173",
    "R785184174",
    "R785184175",
    "R785184177",
    "R785184178",
    "R78518418",
    "R7851842",
    "R785184420",
    "R785184501",
    "R785184502",
    "R785184504",
    "R785184505",
    "R785184507",
    "R785184508",
    "R78518451",
    "R78518452",
    "R785184531",
    "R785184532",
    "R785184540",
    "R785184541",
    "R785184542",
    "R785184543",
    "R785184544",
    "R785184550",
    "R785184551",
    "R785184552",
    "R785184553",
    "R785184554",
    "R785184555",
    "R785184557",
    "R785184558",
    "R785184581",
    "R785184582",
    "R785184585",
    "R785185000",
    "R785185001",
    "R785185002",
    "R785185003",
    "R785185004",
    "R785185005",
    "R785185006",
    "R785185007",
    "R785185008",
    "R785185013",
    "R785185030",
    "R785185031",
    "R785185033",
    "R785185036",
    "R785185060",
    "R785185061",
    "R785185063",
    "R785185064",
    "R785185065",
    "R785185066",
    "R785185067",
    "R785185068",
    "R785185073",
    "R785185074",
    "R785185076",
    "R785185077",
    "R785185078",
    "R78518530",
    "R78518531",
    "R785185320",
    "R785185323",
    "R78518533",
    "R785185340",
    "R785185341",
    "R785185342",
    "R785185343",
    "R785185344",
    "R785185345",
    "R785185346",
    "R785185347",
    "R785185348",
    "R785185350",
    "R78518536",
    "R785185370",
    "R785185371",
    "R785185373",
    "R785185374",
    "R785185376",
    "R785185377",
    "R785185378",
    "R785185600",
    "R785185601",
    "R785185602",
    "R785185605",
    "R785185608",
    "R785185610",
    "R785185611",
    "R785185612",
    "R785185613",
    "R785185614",
    "R785185615",
    "R785185616",
    "R785185617",
    "R785185618",
    "R785185623",
    "R785185624",
    "R785185626",
    "R785185627",
    "R785185640",
    "R785185641",
    "R785185642",
]
ground_truth_ordered_compressed_cells_for_catchment_12104622_at_res_9 = [
    "R7851842",
    "R78518088",
    "R78518161",
    "R78518163",
    "R78518164",
    "R78518165",
    "R78518166",
    "R78518167",
    "R78518168",
    "R78518173",
    "R78518176",
    "R78518177",
    "R78518187",
    "R78518188",
    "R78518322",
    "R78518400",
    "R78518401",
    "R78518402",
    "R78518403",
    "R78518404",
    "R78518405",
    "R78518410",
    "R78518411",
    "R78518412",
    "R78518413",
    "R78518414",
    "R78518415",
    "R78518418",
    "R78518451",
    "R78518452",
    "R78518500",
    "R78518530",
    "R78518531",
    "R78518533",
    "R78518534",
    "R78518536",
    "R78518561",
    "R785180852",
    "R785180854",
    "R785180855",
    "R785180857",
    "R785180858",
    "R785180871",
    "R785180874",
    "R785180875",
    "R785180876",
    "R785180877",
    "R785180878",
    "R785181376",
    "R785181377",
    "R785181378",
    "R785181602",
    "R785181604",
    "R785181605",
    "R785181606",
    "R785181607",
    "R785181608",
    "R785181620",
    "R785181623",
    "R785181624",
    "R785181625",
    "R785181626",
    "R785181627",
    "R785181628",
    "R785181703",
    "R785181704",
    "R785181705",
    "R785181706",
    "R785181707",
    "R785181708",
    "R785181713",
    "R785181716",
    "R785181717",
    "R785181740",
    "R785181741",
    "R785181743",
    "R785181744",
    "R785181745",
    "R785181746",
    "R785181747",
    "R785181748",
    "R785181780",
    "R785181783",
    "R785181784",
    "R785181785",
    "R785181786",
    "R785181787",
    "R785181788",
    "R785181844",
    "R785181845",
    "R785181846",
    "R785181847",
    "R785181848",
    "R785181850",
    "R785181853",
    "R785181854",
    "R785181855",
    "R785181856",
    "R785181857",
    "R785181858",
    "R785181863",
    "R785181864",
    "R785181865",
    "R785181866",
    "R785181867",
    "R785181868",
    "R785182660",
    "R785182661",
    "R785182663",
    "R785182664",
    "R785182665",
    "R785182666",
    "R785182667",
    "R785182668",
    "R785183210",
    "R785183211",
    "R785183212",
    "R785183214",
    "R785183215",
    "R785183217",
    "R785183218",
    "R785183242",
    "R785183250",
    "R785183251",
    "R785183252",
    "R785183254",
    "R785183255",
    "R785184061",
    "R785184062",
    "R785184065",
    "R785184070",
    "R785184071",
    "R785184072",
    "R785184073",
    "R785184074",
    "R785184075",
    "R785184080",
    "R785184081",
    "R785184082",
    "R785184083",
    "R785184084",
    "R785184085",
    "R785184160",
    "R785184161",
    "R785184162",
    "R785184163",
    "R785184164",
    "R785184165",
    "R785184168",
    "R785184170",
    "R785184171",
    "R785184172",
    "R785184173",
    "R785184174",
    "R785184175",
    "R785184177",
    "R785184178",
    "R785184420",
    "R785184501",
    "R785184502",
    "R785184504",
    "R785184505",
    "R785184507",
    "R785184508",
    "R785184531",
    "R785184532",
    "R785184540",
    "R785184541",
    "R785184542",
    "R785184543",
    "R785184544",
    "R785184550",
    "R785184551",
    "R785184552",
    "R785184553",
    "R785184554",
    "R785184555",
    "R785184557",
    "R785184558",
    "R785184581",
    "R785184582",
    "R785184585",
    "R785185013",
    "R785185030",
    "R785185031",
    "R785185033",
    "R785185036",
    "R785185060",
    "R785185061",
    "R785185063",
    "R785185064",
    "R785185065",
    "R785185066",
    "R785185067",
    "R785185068",
    "R785185073",
    "R785185074",
    "R785185076",
    "R785185077",
    "R785185078",
    "R785185320",
    "R785185323",
    "R785185350",
    "R785185370",
    "R785185371",
    "R785185373",
    "R785185374",
    "R785185376",
    "R785185377",
    "R785185378",
    "R785185600",
    "R785185601",
    "R785185602",
    "R785185605",
    "R785185608",
    "R785185623",
    "R785185624",
    "R785185626",
    "R785185627",
    "R785185640",
    "R785185641",
    "R785185642",
]


class ConversionUtilsTestCase(unittest.TestCase):
    def test_get_finest_containing_cell(self):
        assert (str(get_finest_containing_cell(test_poly))) == "R78518"

    def test_CellZoneFromPoly(self):
        """
        Tests correct cells are output for the Geofabric Contracted Catchment 12104622 at resolution 9, without ordering
        or compression.
        """
        cells_obj_list = CellZoneFromPoly(
            feature=test_feature, res_limit=9, return_cells=True
        ).cells_list
        self.cell_str_list = [str(cell) for cell in cells_obj_list]
        for cell_str in self.cell_str_list:
            assert cell_str in ground_truth_cells_for_catchment_12104622_at_res_9

    def test_compress_order_cells(self):
        """
        Tests correct cells are output for the Geofabric Contracted Catchment 12104622 at resolution 9, with ordering
        and compression.
        """
        compressed_cells = compress_order_cells(
            ground_truth_cells_for_catchment_12104622_at_res_9
        )
        assert (
            compressed_cells
            == ground_truth_ordered_compressed_cells_for_catchment_12104622_at_res_9
        )

        equal_length_in = [
            "R785188032",
            "R785188031",
            "R785188035",
            "R785188034",
            "R785188038",
            "R785188053",
            "R785188054",
            "R785188056",
        ]

        equal_length_expected = [
            "R785188031",
            "R785188032",
            "R785188034",
            "R785188035",
            "R785188038",
            "R785188053",
            "R785188054",
            "R785188056",
        ]

        assert compress_order_cells(equal_length_in) == equal_length_expected


if __name__ == "__main__":
    unittest.main()
